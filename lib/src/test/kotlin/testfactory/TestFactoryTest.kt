/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package testfactory

import org.junit.jupiter.api.assertThrows
import kotlin.test.Test
import kotlin.test.assertEquals

class TestFactoryTest {
    data class Foo(val bar: Int, val baz: String)

    open class FooFactory : TestFactory<Foo>(Foo::class) {
        open val bar = 123
        val baz = "hello"

        // TODO: declare getters instead of fixed values
    }

    class FooFactoryWithNulls: TestFactory<Foo>(Foo::class) {
        val bar = null
    }

    class FooFactoryWithWrongTypes: TestFactory<Foo>(Foo::class) {
        val bar = "hello"
        val baz = 123
    }

    @Test fun canBuildDataClass() {
        val foo = TestFactory(Foo::class).build()
        assertEquals(foo, Foo(0, ""))
    }

    /**
     * The user can create their own factory class with default values for
     * each of the fields.
     */
    @Test fun canSubclassFactories() {
        val foo = FooFactory().build()
        assertEquals(foo, Foo(123, "hello"))
    }

    @Test fun cannotProvideNullToNonNullableFields() {
        assertThrows<Exception> { FooFactoryWithNulls().build() }
    }

    @Test fun cannotProvideWrongTypes() {
        assertThrows<Exception> { FooFactoryWithWrongTypes().build() }
    }

    @Test fun anonymousObjectAsOverride() {
        val foo = object : FooFactory() { override val bar = 2 }.build()

        assertEquals(foo, Foo(2, ""))
    }
}
